// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ams.Acceptance.Testing.CreateTestData
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BookAppointment")]
    [NUnit.Framework.CategoryAttribute("CreateTestData")]
    public partial class BookAppointmentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BookAppointment.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BookAppointment", "\tIn order build an app for a specific campaingId\r\n\tAs an internal developer\r\n\tI w" +
                    "ant to be able to book appointment by appointmentId", ProgrammingLanguage.CSharp, new string[] {
                        "CreateTestData"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CreateTestDataCreate Book appointment _MHD")]
        public virtual void CreateTestDataCreateBookAppointment_MHD()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CreateTestDataCreate Book appointment _MHD", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have prepared an api request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("the url is /Appointments/AvailableAppointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("the partnerId is MHD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("add partnerId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("the partnerOfficeId is 1333", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("the officeId is FLX4Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("add partnerOfficeId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("the partnerPracticeId is 1333", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("add partnerPracticeId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("the partnerProviderId is 675", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("add partnerProviderId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("the providerId is 3cncw", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("add providerId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("the windowDateTime is today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("add windowDateTime to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("the windowDays is 180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("add windowDays to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("set available timeslotId and AppointmentDateTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table1.AddRow(new string[] {
                        "PartnerSiteId",
                        "1"});
            table1.AddRow(new string[] {
                        "AppointmentSource",
                        "OAS"});
#line 27
 testRunner.And("set HoldTimeSlot request body with following additional fields", ((string)(null)), table1, "And ");
#line 31
 testRunner.And("the url is /Appointments/HoldTimeSlot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("set consumerId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table2.AddRow(new string[] {
                        "firstname",
                        "FirstName"});
            table2.AddRow(new string[] {
                        "lastname",
                        "LastName"});
            table2.AddRow(new string[] {
                        "dateOfBirth",
                        "1970-01-01"});
            table2.AddRow(new string[] {
                        "sex",
                        "male"});
            table2.AddRow(new string[] {
                        "address1",
                        "123 Main St."});
            table2.AddRow(new string[] {
                        "city",
                        "Denver"});
            table2.AddRow(new string[] {
                        "state",
                        "CO"});
            table2.AddRow(new string[] {
                        "zipcode",
                        "80202"});
            table2.AddRow(new string[] {
                        "email",
                        "automationTest@healthgrades.com"});
            table2.AddRow(new string[] {
                        "HomeNumber",
                        "303-333-3333"});
            table2.AddRow(new string[] {
                        "MobileNumber",
                        "303-333-3333"});
            table2.AddRow(new string[] {
                        "isPatientInsured",
                        "false"});
            table2.AddRow(new string[] {
                        "InsuranceCarrier",
                        ""});
            table2.AddRow(new string[] {
                        "InsurancePlan",
                        ""});
            table2.AddRow(new string[] {
                        "InsuranceSubscriberId",
                        ""});
            table2.AddRow(new string[] {
                        "SendTextReminders",
                        "false"});
            table2.AddRow(new string[] {
                        "Reminder7DaysBefore",
                        "false"});
            table2.AddRow(new string[] {
                        "Reminder2DaysBefore",
                        "false"});
            table2.AddRow(new string[] {
                        "ReminderDayOf",
                        "false"});
            table2.AddRow(new string[] {
                        "ReminderTakeSurvey",
                        "false"});
            table2.AddRow(new string[] {
                        "productChannel",
                        "9"});
            table2.AddRow(new string[] {
                        "SponsorCode",
                        "hg"});
            table2.AddRow(new string[] {
                        "SponsorName",
                        "Pinnacle University Medical Center"});
            table2.AddRow(new string[] {
                        "FacilityCode",
                        ""});
            table2.AddRow(new string[] {
                        "CustomerServicePhone",
                        ""});
            table2.AddRow(new string[] {
                        "AppointmentType",
                        "New Patient"});
            table2.AddRow(new string[] {
                        "isTextVerification",
                        "false"});
            table2.AddRow(new string[] {
                        "isEmailVerification",
                        "false"});
            table2.AddRow(new string[] {
                        "acceptedTermsAndConditions",
                        "true"});
            table2.AddRow(new string[] {
                        "appointmentCategory",
                        "N"});
            table2.AddRow(new string[] {
                        "appointmentReason",
                        "Problem"});
            table2.AddRow(new string[] {
                        "appointmentReasonId",
                        "541"});
            table2.AddRow(new string[] {
                        "partnerDepartmentId",
                        "x"});
#line 33
 testRunner.And("set PreBookAppointment request body with following additional fields", ((string)(null)), table2, "And ");
#line 68
 testRunner.And("the url is /Appointments/PreBookAppointment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("the request is sent as POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("the url is /Appointments/BookAppointmentByAppointmentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("add appointmentId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("add userip to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.When("the request is sent as a GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("the response should be successfull <testscenario>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CreateTestDataCreate Book appointment _ATH")]
        public virtual void CreateTestDataCreateBookAppointment_ATH()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CreateTestDataCreate Book appointment _ATH", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.Given("I have prepared an api request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.And("the url is /Appointments/AvailableAppointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("the partnerId is ATH", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("add partnerId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("the partnerOfficeId is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("the officeId is OO7H5K9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("add partnerOfficeId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("the partnerPracticeId is 1959005", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("add partnerPracticeId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("the partnerProviderId is 23", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("add partnerProviderId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("the providerId is xbd3x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.And("add providerId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.And("the windowDateTime is today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("add windowDateTime to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("the windowDays is 180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("add windowDays to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("set available timeslotId and AppointmentDateTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table3.AddRow(new string[] {
                        "PartnerSiteId",
                        "1"});
            table3.AddRow(new string[] {
                        "AppointmentSource",
                        "OAS"});
#line 96
 testRunner.And("set HoldTimeSlot request body with following additional fields", ((string)(null)), table3, "And ");
#line 100
 testRunner.And("the url is /Appointments/HoldTimeSlot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("set consumerId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table4.AddRow(new string[] {
                        "firstname",
                        "FirstName"});
            table4.AddRow(new string[] {
                        "lastname",
                        "LastName"});
            table4.AddRow(new string[] {
                        "dateOfBirth",
                        "1970-01-01"});
            table4.AddRow(new string[] {
                        "sex",
                        "male"});
            table4.AddRow(new string[] {
                        "address1",
                        "123 Main St."});
            table4.AddRow(new string[] {
                        "city",
                        "Denver"});
            table4.AddRow(new string[] {
                        "state",
                        "CO"});
            table4.AddRow(new string[] {
                        "zipcode",
                        "80202"});
            table4.AddRow(new string[] {
                        "email",
                        "automationTest@healthgrades.com"});
            table4.AddRow(new string[] {
                        "HomeNumber",
                        "303-333-3333"});
            table4.AddRow(new string[] {
                        "MobileNumber",
                        "303-333-3333"});
            table4.AddRow(new string[] {
                        "isPatientInsured",
                        "false"});
            table4.AddRow(new string[] {
                        "InsuranceCarrier",
                        ""});
            table4.AddRow(new string[] {
                        "InsurancePlan",
                        ""});
            table4.AddRow(new string[] {
                        "InsuranceSubscriberId",
                        ""});
            table4.AddRow(new string[] {
                        "SendTextReminders",
                        "false"});
            table4.AddRow(new string[] {
                        "Reminder7DaysBefore",
                        "false"});
            table4.AddRow(new string[] {
                        "Reminder2DaysBefore",
                        "false"});
            table4.AddRow(new string[] {
                        "ReminderDayOf",
                        "false"});
            table4.AddRow(new string[] {
                        "ReminderTakeSurvey",
                        "false"});
            table4.AddRow(new string[] {
                        "productChannel",
                        "9"});
            table4.AddRow(new string[] {
                        "SponsorCode",
                        "hg"});
            table4.AddRow(new string[] {
                        "SponsorName",
                        "Pinnacle University Medical Center"});
            table4.AddRow(new string[] {
                        "FacilityCode",
                        ""});
            table4.AddRow(new string[] {
                        "CustomerServicePhone",
                        ""});
            table4.AddRow(new string[] {
                        "AppointmentType",
                        "New Patient"});
            table4.AddRow(new string[] {
                        "isTextVerification",
                        "false"});
            table4.AddRow(new string[] {
                        "isEmailVerification",
                        "false"});
            table4.AddRow(new string[] {
                        "acceptedTermsAndConditions",
                        "true"});
            table4.AddRow(new string[] {
                        "appointmentCategory",
                        "N"});
            table4.AddRow(new string[] {
                        "appointmentReason",
                        "Problem"});
            table4.AddRow(new string[] {
                        "appointmentReasonId",
                        "541"});
            table4.AddRow(new string[] {
                        "partnerDepartmentId",
                        "x"});
#line 102
 testRunner.And("set PreBookAppointment request body with following additional fields", ((string)(null)), table4, "And ");
#line 137
 testRunner.And("the url is /Appointments/PreBookAppointment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.And("the request is sent as POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.And("the url is /Appointments/BookAppointmentByAppointmentId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("add appointmentId to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("add userip to url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.When("the request is sent as a GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("the response should be successfull <testscenario>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
